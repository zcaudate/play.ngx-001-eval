worker_processes 1;
error_log logs/error.log warn;
events {
  worker_connections 1024;
}
http {
  lua_package_path "$prefix/src/?.lua;;";
  log_format '$remote_addr - $remote_user [$time_local] ' '$request - $status $body_bytes_sent ' '$http_referer - $http_user_agent - $gzip_ratio';
  lua_shared_dict GLOBAL 20k;
  lua_shared_dict WS_DEBUG 20k;
  server {
    listen 18091 reuseport;
    access_log logs/access.log;
    charset utf-8;
    charset_types application/json;
    default_type application/json;
    location = /eval {
      content_by_lua_block {
        local function xt_lang_base_repl___return_encode(out,id,key)
          local ret = nil
          local r_ok,r_err = pcall(function ()
            if nil == out then
              ret = cjson.encode({id=id,key=key,type='data',value=cjson['null']})
            else
              ret = cjson.encode({id=id,key=key,type='data',value=out})
            end
          end)
          if r_err then
            return cjson.encode({
              id=id,
              key=key,
              type='raw',
              error=tostring(r_err),
              value=tostring(out)
            })
          else
            return ret
          end
        end
        
        local function xt_lang_base_repl___return_wrap(f)
          local out
          local o_ok,o_err = pcall(function ()
            out = f()
          end)
          if o_err then
            return cjson.encode({type='error',value=o_err})
          else
            return xt_lang_base_repl___return_encode(out)
          end
        end
        
        local function xt_lang_base_repl___return_eval(s)
          return xt_lang_base_repl___return_wrap(function ()
            local load_fn = loadstring or load
            local f,err = load_fn(s)
            if err then
              error(err)
            else
              return f()
            end
          end)
        end
        
        cjson = require('cjson')
        ngx.req.read_body()
        local body = ngx.req.get_body_data()
        ngx.status = ngx.HTTP_OK
        ngx.say(xt_lang_base_repl___return_eval(body))
        return ngx.exit(ngx.HTTP_OK)
      }
    }
    location = /eval/ws {
      content_by_lua_block {
        local ws_handler = DEBUG['ws_handler']
        ws_handler()
      }
    }
    location = /echo/ws {
      content_by_lua_block {
        local ngxwsserver = require('resty.websocket.server')
        local conn = ngxwsserver:new({timeout=10000,max_payload_len=65535})
        while true do
          local data,tag,err = conn:recv_frame()
          if conn.fatal then
            ngx.log(ngx.ERR,'failed to receive frame: ',err)
            break
          end
          if not data then
            local bytes,err = conn:send_ping()
            if not bytes then
              ngx.log(ngx.ERR,'failed to send ping: ',err)
              break
            end
          elseif tag == 'close' then
            conn:send_close(1000)
            break
          elseif tag == 'ping' then
            local bytes,err = conn:send_pong()
            if not bytes then
              ngx.log(ngx.ERR,'failed to send ping: ',err)
              break
            end
          elseif tag == 'pong' then
            ngx.log(ngx.INFO,'pong recieved')
          else
            conn:send_text(data)
          end
        end
      }
    }
  }
}